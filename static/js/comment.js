class comment {
	constructor( comment ) {
		this.selector = ".comments"
		this.content = comment

		// add
		// escape body (just to be sure) + newlines | author dosnt has to be escaped cuz its generated by srv (its the ip or later mby reverse dns)
		comment.body = comment.body.replaceAll("<", "&lt;").replaceAll(">", "&lt;").replaceAll("\n","<br>")

		// construct time:
		let date = new Date(this.content.time)
		let time = String(date.getHours()).padStart(2,"0") + ":"
		time    += String(date.getMinutes()).padStart(2,"0") + ":"
		time    += String(date.getSeconds()).padStart(2,"0") + ":"
		time    += String(date.getMilliseconds()).padStart(3,"0") + " "
		time    += String(date.getDate()).padStart(2,"0") + "-"
		time	+= String(date.getMonth()).padStart(2,"0") + "-"
		time    += String(date.getFullYear())
		
		// construct author hover info
		let authorinfo = this.content?.authorinfo?.country
		authorinfo = authorinfo ? `(${authorinfo})` : "";

		// assemble element
		let elem = document.createElement("DIV")
		elem.classList = ["comment"]
		elem.onclick = () => {
			console.log(this.content.id)
		}
		elem.innerHTML = `
<div class="authorbox">
<span class="author">${this.content.author} ${authorinfo}</span>
<span class="timestamp">wrote at ${time}</span>
</div>
<hr class="speperator" \\>
<div class="body">${comment.body}</div>`

		$( this.selector ).append( elem )
	}

	reply() {
	// WIP / planned
	}
}

function displaycomments() {
	if( conf.commenting_enabled )
    commenting = new metaentry(undefined, "comment:", ".content",{"content":
`Your comment: (no MD)<br>
<textarea class="comment commtext"></textarea>
<input class="comment" onclick="sendcomment($('.commtext').val())" type="submit" value="Submit!" \\>`})

	comments = []
	comments.push( new metaentry(undefined, "comments:", ".content",{"content":"", "class":"comments"}))

	// load comments:
	reloadcommenting()
}

function reloadcommenting() {
	$(".comments").html("These comments are user generated! they are <strong>NOT</strong> (actively) moderated! To report one please click <a href=\"/static/reporting.html\" style=\"color:blue\">here</a>!")
	fetch("/comments?post=" + postDATA.id).then(d=>d.json()).then(data=>{
		for (i in data.content) {
			comments.push( new comment( data.content[i] ) )
		}
		// not jank boxsizefix:
		let elem = document.createElement("div")
		elem.innerHTML = "."
		elem.classList = ["hidden"]
		$( ".comments" ).append( elem )	
	})
}

function sendcomment(comment) {
	// get ip:
	let token = Math.floor( Math.random()*10**16 )
	fetch(conf.ipget_endpoint_set.replace("${TOKEN}", token), {mode: "no-cors"}).then(()=>{
		// comment
		console.log(postDATA.id, comment, token)
		$.post("/comments", {
			post: postDATA.id, 
			body: comment, 
			ip: token
		}).then(
			setTimeout( reloadcommenting, 50 )
		)
	})
}

function vote(a, uv, dv) {
	// get ip:
	let token = Math.floor( Math.random()*10**16 )
	fetch(conf.ipget_endpoint_set.replace("${TOKEN}", token), {mode: "no-cors"}).then(()=>{
		// comment
		a = a.replace("+", "%2B")
		console.log(postDATA.id, comment, token)
		fetch(`/comments?rate&post=${postDATA.id}&rating=${a}&ip=${token}`).then(d=>d.json()).then(d=>{
			if ( d.type != "s" ) {
				alert( "Error: " + d.text )
			} else {
				console.log(`voted! ${JSON.stringify(d)}`)

				// refresh votes
				setTimeout(() => {
					uv.html(d.content["+"]) // upvote refresh
					dv.html(d.content["-"]) // downvote refresh

					// do the background color
					console.log(a)
					if ( a == "-" ) {
						dv.parent().attr("style", "background-color: #7F000033;")
						uv.parent().attr("style", "")
					} else {
						uv.parent().attr("style", "background-color: #007F0033;")
						dv.parent().attr("style", "")
					}
				}, 50)
			}
		})
	})
}
